#!/usr/bin/env python3

import os, sys

sys.path.insert(0, os.getcwd() + "/submodules/LIB/scripts")

import setup

name = "iob_soc_sut"
version = "V0.70"
flows = "pc-emul emb sim doc fpga"
if setup.is_top_module(sys.modules[__name__]):
    setup_dir = os.path.dirname(__file__)
    build_dir = f"../{name}_{version}"

# ######### Register file peripheral configuration ##############
regfileif_options = {
    "regs": [
        {
            "name": "regfileif",
            "descr": "REGFILEIF software accessible registers.",
            "regs": [
                {
                    "name": "REG1",
                    "type": "W",
                    "n_bits": 8,
                    "rst_val": 0,
                    "addr": -1,
                    "log2n_items": 0,
                    "autologic": True,
                    "descr": "Write register: 8 bit",
                },
                {
                    "name": "REG2",
                    "type": "W",
                    "n_bits": 16,
                    "rst_val": 0,
                    "addr": -1,
                    "log2n_items": 0,
                    "autologic": True,
                    "descr": "Write register: 16 bit",
                },
                {
                    "name": "REG3",
                    "type": "R",
                    "n_bits": 8,
                    "rst_val": 0,
                    "addr": -1,
                    "log2n_items": 0,
                    "autologic": True,
                    "descr": "Read register: 8 bit",
                },
                {
                    "name": "REG4",
                    "type": "R",
                    "n_bits": 16,
                    "rst_val": 0,
                    "addr": -1,
                    "log2n_items": 0,
                    "autologic": True,
                    "descr": "Read register 16 bit",
                },
                {
                    "name": "REG5",
                    "type": "R",
                    "n_bits": 32,
                    "rst_val": 0,
                    "addr": -1,
                    "log2n_items": 0,
                    "autologic": True,
                    "descr": "Read register 32 bit. In this example, we use this to pass the sutMemoryMessage address.",
                },
            ],
        }
    ]
}
# ############### End of REGFILEIF configuration ################

# ################## SUT configuration to generate system via IOb-SoC #######################
iob_soc_options = {
    "name": name,
    "peripherals": [
        # {'name':'UART0', 'type':'UART', 'descr':'Default UART interface', 'params':{}}, # It is possible to override default tester peripherals with new parameters
        ##{'name':'ETHERNET0', 'type':'ETHERNET', 'descr':'Ethernet interface', 'params':{}},
        {
            "name": "REGFILEIF0",
            "type": "REGFILEIF",
            "descr": "Register file interface",
            "params": {},
        },
        {"name": "GPIO0", "type": "GPIO", "descr": "GPIO interface", "params": {}},
    ],
    "peripherals_dirs": {
        "REGFILEIF": f"{setup_dir}/submodules/REGFILEIF",
        "GPIO": f"{setup_dir}/submodules/GPIO",
    },
    "peripheral_portmap": [],
    "confs": [],
    "submodules": {
        "hw_setup": {
            "headers": [],
            "modules": [("REGFILEIF", regfileif_options), "GPIO"],
        },
    },
}

# ############### End of SUT configuration ###################

submodules = {
    "hw_setup": {
        "headers": [],
        "modules": [("IOBSOC", iob_soc_options)],
    },
}

blocks = []

confs = []

regs = []

ios = []


# Main function to setup this system and its components
def main():
    # Setup this system without auto-generating files (They will be generated by IOb-SoC)
    setup.setup(sys.modules[__name__], disable_file_gen=True)


if __name__ == "__main__":
    main()
